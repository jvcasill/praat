# _ProsodyPro (previously: _TimeNormalizeF0.praat)
# Version 5.4
# Last update: 19 October, 2013
# Written by:   Yi Xu; all rights reserved.
# Report any bugs to Yi Xu (yi.xu@ucl.ac.uk)

# Find more information at http://www.phon.ucl.ac.uk/home/yi/ProsodyPro/

# SYNOPSIS: 
# 1) Automatically open each .wav file in a folder, manually label intervals and rectify 
# vocal pulse markings; 
# 2) Save automatically trimmed (smoothed) f0 contours; 
# 3) Save time-normalized f0; 
# 4) Save time-normalized f0 with actual time; 
# 5) Save manually rectified, trimmed f0 as PitchTier objects which can replace the pitch 
# tier in Manipulation objects; 
# 6) Save sampled f0; 
# 7) Save f0 velocity; 
# 8) Save maxf0, minf0, excursionsize, mean f0, intensity, duration, peak velocity, final velocity and final f0 of labeled intervals;
# 9) Save results into ensemble files.

# INSTRUCTIONS:

# 1. Put all the (or a group of) sound files to be analyzed in a single folder together with 
# this script, and launch Praat;

# 2. Select Open Praat Script... from the top menu;

# 3. Locate this script in the dialogue window and select it;

# 4. When the script window opens in Praat, select Run from the Run menu (or type the key 
# shortcut command-r or control-r);

# 5. When a dialogue window opens, check or uncheck the boxes according to your analysis needs, 
# and set appropriate values in the text fields or simply use the default values.

# 6. Click OK and three windows will appear. The first big window displays the waveform together 
# with vocal cycle marks (vertical lines) generated by Praat. This is where you can manually 
# make sure the F0 tracking is accurate by adding marks to those vocal cycles missed by Praat 
# and deleting any redundant marks. But you need to do so only for the named intervals, as 
# explained next.

# 7. The second big window displays the waveform and spectrogram of the current sound together 
# with optional pitch track and formant tracks in the spectrogram panel, and vocal pulse marks 
# in the waveform panel. (These tracks and marks cannot be manually changed. So you can hide 
# them to reduce processing time by using the corresponding menu.) At the bottom of this window 
# are two TextGrids, where you can insert interval boundaries (upper grid) and point labels 
# (lower grid). Most importantly, for any interval that you want to have analysis results saved, 
# you need to type a name. Make the name as simple as possible to save time, e.g., a, b, or 1, 2.

# 8. When you are done with manual correction and labeling, activate the third, small window.
# Click "Continue" there and two new big windows will appear, displaying the spectrogram, 
# waveform and vocal cycle marks of the next sound file in the folder. You can repeat this 
# process until all the sound files in the folder are processed. Or you can finish at any point  
# by clicking the "Finish" button in the small window (Do not press the stop button! You will lose
# the changes to the current file and see some unpleasant messages!) Please remember to note down 
# the current file number in pop_up window so that
# you know where to start when you want to continue the labeling next time.

# 9. New! If you want to jump to any file, just replace the current number in the small
# window with the new file number minus one. For example, if you want to jump to file 1, enter 0.

# 10. Each time you press the "Continue" button in the small window, various analysis results 
# are saved for the current sound into individual text files as described below. If, however,
# you want to change certain analysis parameters after processing all the sound files, you
# can rerun the script, set the "Input File No" to 1 in the initial Dialogue window and uncheck
# the "Pause between sound files" button before pressing "OK". The script will then run by 
# itself and cycle through all the sound files in the folder one by one. Just watch the action 
# with amusement.

# 10. The following files will be saved as each sound file is processed:  

# 	.rawf0 -- raw with real time computed directly from the pulse markings.

# 	.f0 -- trimmed f0 with real time.

# 	.normtimef0 -- time-normalized f0. The f0 in each interval is divided 
# 	into the same number of points (default = 10). Thus points 1-10 belong to interval 1, and 
# 	points 11-20 belong to interval 2, etc.

# 	.actutimenormf0 -- time-normalized f0 with each interval divided into the same number
# 	of points (default = 10). But the time scale is the original, except
# 	that the onset time of interval 1 is set to 0, unless the "Set initial time to 0" box in 
# 	the initial dialogue window is unchecked.  

# 	.samplef0 -- f0 values at fixed time intervals specified by "f0 sample rate".    

# 	.smoothf0 -- samplef0 f0 smoothed by a triangular window.

# 	.f0velocity -- velocity profile (instantaneous rates of F0 change) of f0 contour in 
# 	semitone/s at fixed time intervals specified by "f0 sample rate".

# 	.means -- containing various measurements, including maxf0, minf0, excursion size,  
# 	mean intensity, duration, max_velocity, final_velocity. Final velocity is taken at a point
#   earlier than the interval offset by time specified by "Final offset" in the 
#   startup dialogue window. It is an indicator of the slope of the underlying target of the interval.
#	Final f0 is is an indicator of the height of the underlying target, taken also at a point
#   specified by "Final offset" in the startup dialogue window.

# 11. The values in these files correspond only to the named intervals, i.e., those with 
# text names. No values are saved for the blank intervals.

# 12. The .f0, .normtimef0, and .actutimenormf0 files can be opened by a graphing program 
# such as Excel. The left-hand column is time and the right-hand column f0.

# 13. The .means file contains values of maxf0, minf0, excursionsize, meanf0, mean intensity, duration and 
# peak velocity (if "Get sample f0 box" has been checked when processing individual files) of 
# all named intervals.

# 14. After the analysis of all the individual sound files are done, you can gather the analysis 
# results into a number of ensemble files by running the script again and checking the "Get 
# ensemble results" button in the initial dialogue window. The following ensemble files are saved:

# 		1)	normf0.txt (Hz)
# 		2)	normtime_semitonef0.txt (semitones)
# 		3)	normtime_f0velocity.txt (semitones/s)
# 		4)	normtimeIntensity.txt (dB)
# 		5)	normactutime.txt (s)
# 		6)	maxf0.txt (Hz)
# 		7)	minf0.txt (Hz)
# 		8)	excursionsize.txt (semitones)
# 		9)	meanf0.txt (Hz)
# 		10)	duration.txt (ms)
# 		11)	maxvelocity.txt (semitones/s)
# 		12)	finalvelocity.txt (semitones/s)
# 		13)	finalf0.txt (Hz)
# 		14)	meanintensity.txt (dB)
# 		15)	samplef0.txt (Hz)
# 		16)	f0velocity.txt (semitones/s)

# 15. Note that you can generate an ensemble file only if you have saved at least one  
# corresponding individual analysis file described earlier.


# If your corpus consists of repeated trials, you can obtain average measurements over all the 
# repetitions of each unique condition. This can be done by changing the Nrepetitions in the 
# dialogue window to the repetition number in your corpus and then check Get ensemble files before 
# pressing the OK button. The following averaged files will be saved:

#		17)	mean_normf0.txt
#		18)	mean_normtime_f0velocity.txt
#		19)	mean_normtimeIntensity.txt
#		20)	mean_normactutime.txt
#		21)	mean_meanf0.txt
#		22)	mean_maxf0.txt
#		23)	mean_minf0.txt
#		24)	mean_excursionsize.txt
#		25)	mean_maxvelocity.txt
#		26)	mean_finalf0.txt
#		27)	mean_finalvelocity.txt
#		28)	mean_duration.txt
#		29)	mean_meanintensity.txt

# You can also generate mean time-normalized contours averaged across speakers. To do this, first 
# create a text file (speaker_folders.txt) containing the speaker folder names arranged in a single 
# column. Then run ProsodyPro with the 4th task--Average across speakers--checked. The script will 
# read the mean time-normalized files from all the speaker folders, taking a cross-speaker average 
# of each value. The grand averages are saved in the files listed below. In the Start window, you 
# also need to tell ProsodyPro where the speaker folder file is. The default location is the current 
# directory: "./". If it is in an upper directory, you should enter "../"

# 		30)	mean_normf0_cross_speaker.txt
# 		31)	mean_normtime_f0velocity_cross_speaker.txt
# 		32)	norm_actutime_cross_speaker.txt


form Start
	integer Input_File_No 1
	integer Nrepetitions 0
	boolean Ignore_extra_repetitions 0
	word TextGrid_extension .label
	word Sound_file_extension .wav
	comment Or .WAV, .aiff, .AIFF, .mp3, .MP3
	choice Task: 1
		button Interactive labeling
		button Process all sounds without pause
		button Get emsemble files
		button Average across speakers
	word Speaker_folder_location ./
	word Speaker_folder_file speaker_folders.txt
	comment F0 analysis options:	
		integer left_F0_range_(Hz) 30
		integer right_F0_range_(Hz) 400
		integer N._normalized_times_per_interval 10
		integer F0_sample_rate_(Hz) 100
		real Perturbation_length_(s) 0
		real Final_offset_(s) -0.03
		real Smoothing_window_width_(s) 0.07
		boolean Save_output_files 1
		boolean Set_initial_normalized_time_to_0 1
endform

if task = 3
	printline 'newline$' 	Collecting data from all individual files. Please wait patiently...'newline$'
endif

if (praatVersion < 5107)
	printline Requires Praat version 5.1.07 or higher. Please upgrade your Praat version 
	exit
endif

npoints = n._normalized_times_per_interval
min_f0 = left_F0_range
max_f0 = right_F0_range

directory$ = "./"
Create Strings as file list... list 'directory$'*'sound_file_extension$'
numberOfFiles = Get number of strings
if !numberOfFiles
	Create Strings as file list... list 'directory$'*.WAV
	numberOfFiles = Get number of strings
endif
if !numberOfFiles and task != 4
	exit There are no sound files in the folder!
elsif task != 4
	Write to raw text file... 'directory$'FileList.txt
endif

if nrepetitions > 0 and numberOfFiles mod nrepetitions and !ignore_extra_repetitions
	exit Averaging over repetitions failed. The total number of sound files cannot not be evenly divided by the number of repetitions. Please make sure to enter a correct Nrepetitions in the startup window.
endif
hasmeanstitle = 0
hasnormf0 = 0
hasmean_normf0 = 0
found_interval = 0
hasnormactutime = 0
hassamplef0 = 0
hasf0velocity = 0
hasnormtime_f0velocity = 0
hasnormIntensity = 0
number = input_File_No
repetition = 1
if task == 4
	call Cross_speaker_means mean_normf0 logarithmic
	call Cross_speaker_means mean_normtime_f0velocity linear
	call Cross_speaker_means mean_normactutime linear
else
	for current_file from input_File_No to numberOfFiles
		select Strings list
		fileName$ = Get string... current_file
		name$ = fileName$ - ".wav" - ".WAV"
		if task == 3
			rep$ = right$(name$, 1)
			if 'rep$' <= nrepetitions
				printline Reading file 'name$'
				if fileReadable ("'name$'.means")
					call All_means 'name$'
					call All_normf0 'name$'
					call All_samplef0 'name$'
					call All_f0velocity 'name$'
					call All_normtime_f0velocity 'name$'			
					if nrepetitions > 0
						repetition = if repetition >= nrepetitions then 1 else repetition+1 fi
					endif
				endif
			endif
		else
			call Labeling 'fileName$'
		endif
	endfor
endif

if task == 3
	echo Ensemble files saved:
	printline 1)	normf0.txt
	printline 2)	normtime_semitonef0.txt
	printline 3)	normtime_f0velocity.txt
	printline 4)	normtimeIntensity.txt
	printline 5)	normactutime.txt
	printline 6)	maxf0.txt
	printline 7)	minf0.txt
	printline 8)	excursionsize.txt
	printline 9)	meanf0.txt
	printline 10)	duration.txt
	printline 11)	maxvelocity.txt
	printline 12)	finalvelocity.txt
	printline 13)	finalf0.txt
	printline 14)	meanintensity.txt
	printline 15)	samplef0.txt
	printline 16)	f0velocity.txt
	if nrepetitions > 0
		printline 17)	mean_normf0.txt
		printline 18)	mean_normtime_semitonef0.txt
		printline 19)	mean_normtime_f0velocity.txt
		printline 20)	mean_normtimeIntensity.txt
		printline 21)	mean_normactutime.txt
		printline 22)	mean_maxf0.txt
		printline 23)	mean_minf0.txt
		printline 24)	mean_excursionsize.txt
		printline 25)	mean_meanf0.txt
		printline 26)	mean_duration.txt
		printline 27)	mean_maxvelocity.txt
		printline 28)	mean_finalvelocity.txt
		printline 29)	mean_finalf0.txt
		printline 30)	mean_meanintensity.txt
	endif
endif

procedure Labeling file_name$ file_extension$
	Read from file... 'directory$''file_name$'
	name$ = file_name$ - ".wav" - ".WAV"
	labelfile$ = name$+"'TextGrid_extension$'"
	textgridfile$ = name$+".TextGrid"
	if fileReadable (labelfile$)
		Read from file... 'directory$''name$''TextGrid_extension$'
	elsif fileReadable (textgridfile$)
		Read from file... 'directory$''name$'.TextGrid
	else
		To TextGrid... "interval point" point
	endif
	plus Sound 'name$'
	Edit
	
	pulsefile$ = name$+".pulse"
	if fileReadable (pulsefile$)
		Read from file... 'directory$''name$'.pulse
	else
		select Sound 'name$'
		To PointProcess (periodic, cc)... min_f0 max_f0
		Rename... 'name$'
	endif
	plus Sound 'name$'
	Edit
	
	call Save 'directory$' 'name$'
	select Sound 'name$'
	Remove
	if task == 1
		if finished = 1
			echo Current file number is 'current_file'.
			if nintervals = 1
				printline
				printline 	No labeled intervals. Generating entire f0 track instead!
				printline
				printline 	Note that this is not very useful for most purposes.
			endif
			exit
		endif
	endif
endproc

procedure Save directory$ name$
	if task == 1
		beginPause ("Press Finish to exit")
			comment ("The next file will be current_file + 1")
			integer ("current_file", 'current_file')
		finished = endPause ("Finish", "Continue", 2)
	endif
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			found_interval = 1
		endif
	endfor

	select PointProcess 'name$'
	if save_output_files
		npulses = Get number of points
		for n from 2 to npulses-1				;	Somehow Praat (v5.3.39) is giving number points + 1 for some files. Check if it is fixed in later versions.
			time1 = Get time from index... n-1
			time2 = Get time from index... n
			if time2 - time1 < 0.001
				Remove point... n
			endif
		endfor
		Write to short text file... 'directory$''name$'.pulse
		maxperiod = 1/min_f0
		To PitchTier... maxperiod
		if npulses > 1
			Down to TableOfReal... Hertz
			Write to headerless spreadsheet file... 'directory$''name$'.rawf0
			Remove
		else
			printline Please add at least 3 pulse marks before proceeding!
		endif
		select PitchTier 'name$'
		call Trimf0
		Write to short text file... 'directory$''name$'.PitchTier
		Down to TableOfReal... Hertz
		Write to headerless spreadsheet file... 'directory$''name$'.f0
		Remove
	
		call Sampling
		if nintervals = 1
			printline
			printline 	No labeled intervals. Generating entire f0 track instead!
			printline
			printline 	Note that this is not very useful for most purposes.
		endif
		
		call Differentiation
		if found_interval
			select TableOfReal samplef0
			Write to headerless spreadsheet file... 'directory$''name$'.samplef0
			select TableOfReal smoothvelocity
			Write to headerless spreadsheet file... 'directory$''name$'.f0velocity
			Remove
		endif

		call Normalization smoothf0 normf0 normactuf0
		call Normalization smoothvelocity normvelocity normactuf0
		call Intensity_normalization
		if found_interval
			select TableOfReal normf0
			Write to headerless spreadsheet file... 'directory$''name$'.normtimef0
			select TableOfReal normvelocity
			Write to headerless spreadsheet file... 'directory$''name$'.normtime_f0velocity
			select TableOfReal normactuf0
			Write to headerless spreadsheet file... 'directory$''name$'.actutimenormf0
			select TableOfReal normtimeIntensity
			Write to headerless spreadsheet file... 'directory$''name$'.normtimeIntensity
		endif
		plus PointProcess 'name$'
		plus TableOfReal normf0
		plus TableOfReal normactuf0
		plus TableOfReal normvelocity
		plus TableOfReal normtimeIntensity
		if smoothing_window_width > 0
			plus PitchTier smoothf0
			plus PitchTier smoothvelocity
			plus TableOfReal smoothf0
		endif
		plus PitchTier samplef0
		plus TableOfReal samplef0
		Remove
		
		call Means
		select PitchTier semitonef0
		Remove

		select TableOfReal means
		Write to headerless spreadsheet file... 'directory$''name$'.means
		plus Intensity 'name$'
		Remove
		select PitchTier 'name$'
		plus PitchTier velocity
		Remove
	else
		select TextGrid 'name$'
		plus PointProcess 'name$'
		Remove
	endif
	
	select TextGrid 'name$'
	Write to short text file... 'directory$''name$''TextGrid_extension$'
	Remove
endproc

procedure Trimf0
	maxbump = 0.01
	maxedge = 0.0
	maxgap = 0.033
	n = Get number of points
	
	first = Get value at index... 1
	second = Get value at index... 2
	penult = Get value at index... n-1
	last = Get value at index... n
	tfirst = Get time from index... 1
	if npulses < 3
		printline Please add at least 3 pulse marks before proceeding!
		exit
	endif
	tlast = Get time from index... n
	for k from 1 to 3
		call Trim
	endfor
	Remove point... 1
	Add point... tfirst second + (first-second) / 1000
	Remove point... n
	Add point... tlast penult + (last-penult) / 1000
endproc

procedure Trim
	for i from 2 to n-1
		tleft = Get time from index... i-1
		tmid = Get time from index... i
		tright = Get time from index... i+1
		gap1 = tmid - tleft
		gap2 = tright - tmid
		left = Get value at index... i-1
		mid = Get value at index... i
		right = Get value at index... i+1
		diff1 = mid - left
		diff2 = mid - right
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left + maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right + maxbump
		endif

		diff1 = left - mid
		diff2 = right - mid
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left - maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right - maxbump
		endif
	endfor
endproc

procedure Normalization pitchtier$ tableOfReal1$ tableOfReal2$
	if smoothing_window_width > 0
		select PitchTier 'pitchtier$'
	else
		select PitchTier 'name$'
	endif
	lasttime = Get finishing time
	Create TableOfReal... 'tableOfReal1$' 1 2
	Set column label (index)... 1 NormalizedTime
	Set column label (index)... 2 F0
;	Create TableOfReal... normactuf0 1 2
	Create TableOfReal... 'tableOfReal2$' 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	interval = 0
	found_interval = 0
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			if smoothing_window_width > 0
				select PitchTier 'pitchtier$'
			else
				select PitchTier 'name$'
			endif
			index1 = Get high index from time... start1
			index2 = Get low index from time... end
			if found_interval = 0
				found_interval = 1
				if smoothing_window_width > 0
					select PitchTier 'pitchtier$'
				else
					select PitchTier 'name$'
				endif
				firstime = start1
			endif
			call Normalize 'pitchtier$' 'tableOfReal1$' 'tableOfReal2$'
			interval = interval + 1
		endif
	endfor
	select TableOfReal 'tableOfReal1$'
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal 'tableOfReal2$'
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Normalize pitchtier$ tableOfReal1$ tableOfReal2$
	duration = end - start1

	for x from 0 to npoints-1
		normtime = start1 + duration * x / npoints
		if smoothing_window_width > 0
			select PitchTier 'pitchtier$'
		else
			select PitchTier 'name$'
		endif
		f0 = Get value at time... normtime
		select TableOfReal 'tableOfReal1$'
		nrows = Get number of rows
		Set value... nrows 1 1+x+interval*npoints
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1

		select TableOfReal 'tableOfReal2$'
		nrows = Get number of rows
		Set value... nrows 1 normtime
		if set_initial_normalized_time_to_0
			Set value... nrows 1 normtime-firstime
		endif
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1
	endfor
endproc

procedure Intensity_normalization
	Create TableOfReal... normtimeIntensity 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 Intensity
	select Sound 'name$'
	To Intensity... 100 0 yes
	
	select TextGrid 'name$'
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			select Intensity 'name$'
			duration = end - start1
			for x from 0 to npoints-1
				normtime = start1 + duration * x / npoints
				select Intensity 'name$'
				intensity = Get value at time... normtime Cubic
				select TableOfReal normtimeIntensity
				nrows = Get number of rows
				Set value... nrows 1 normtime
				if set_initial_normalized_time_to_0
					Set value... nrows 1 normtime-firstime
				endif
				Set value... nrows 2 intensity
				new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal normtimeIntensity
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select Intensity 'name$'
	plus TableOfReal normactuf0
	Remove
endproc

procedure Sampling
	select PitchTier 'name$'
	Create TableOfReal... samplef0 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	found_interval = 0
	nrows = 0
	sampleStart = Get starting point... 1 1
	sampleEnd = Get end point... 1 nintervals
	Create PitchTier... samplef0 sampleStart sampleEnd
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			duration = end - start1
			if found_interval = 0
				found_interval = 1
			endif

			select PitchTier 'name$'
			nsamples = duration * f0_sample_rate + 1
			for x from 0 to nsamples - 1
				select PitchTier 'name$'
				sample_time = start1 + x/f0_sample_rate
				f0 = Get value at time... sample_time
				select PitchTier samplef0
				Add point... sample_time f0
				select TableOfReal samplef0
				nrows = Get number of rows
				Set value... nrows 1 sample_time
				Set value... nrows 2 f0
				new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal samplef0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	if smoothing_window_width > 0
		call Smooth samplef0 smoothf0 smoothing_window_width * f0_sample_rate
		Down to TableOfReal... Hertz
		Write to headerless spreadsheet file... 'directory$''name$'.smoothf0
	endif
endproc

procedure Differentiation
	select PitchTier smoothf0
	Copy... semitonef0
	Formula... 12 * ln (self) / ln(2); semitone
	Down to TableOfReal... Hertz
	Set column label (index)... 1 time
	Set column label (index)... 2 f0 (st)
	Write to headerless spreadsheet file... 'directory$''name$'.semitonef0
	Remove
	Create PitchTier... velocity sampleStart sampleEnd

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	n_labeled_intervals = 0

	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			start1 = Get starting point... 1 m
			end = Get end point... 1 m
			select PitchTier smoothf0
			index_first = Get high index from time... start1
			index_last = Get low index from time... end
			interval_length = 0
			for x from index_first to index_last - 1
				if x = index_first or x = index_last - 1
					x2 = x + 1
				else
					x2 = x + 2
				endif
				select PitchTier smoothf0
				f01 = Get value at index... x
				f02 = Get value at index... x2
				sampletime1 = Get time from index... x
				sampletime2 = Get time from index... x2
				velocity = (f02 - f01) / (sampletime2 - sampletime1)
				velocity_time = sampletime1
;				velocity_time = 0.5 * (sampletime1 + sampletime2)
				select PitchTier velocity
				Add point... velocity_time velocity
				interval_length += 1
			endfor
			n_labeled_intervals += 1
			label$[n_labeled_intervals] = label$
			interval_length'n_labeled_intervals' = interval_length
		endif
	endfor
	call Smooth velocity smoothvelocity smoothing_window_width*f0_sample_rate
	Down to TableOfReal... Hertz
	row = 0
	for m from 1 to n_labeled_intervals
		for x from 1 to interval_length'm'
			row += 1
			new_label$ = replace$(label$[m], " ", "_", 0)
			Set row label (index)... row 'new_label$'
		endfor
	endfor
endproc

procedure Means
	select Sound 'name$'
	To Intensity... 100 0 yes

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	Create TableOfReal... means 1 9
	Set column label (index)... 1 maxf0
	Set column label (index)... 2 minf0
	Set column label (index)... 3 excursion_size
	Set column label (index)... 4 meanf0
	Set column label (index)... 5 finalf0
	Set column label (index)... 6 mean_intensity
	Set column label (index)... 7 duration
	Set column label (index)... 8 max_velocity
	Set column label (index)... 9 final_velocity
	interval = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = "" or nintervals = 1
			interval = interval + 1
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			duration = 1000 * (end - start1)
			select TableOfReal means
			new_label$ = replace$(label$, " ", "_", 0)
			Set row label (index)... interval 'new_label$'
			select PitchTier 'name$'
			meanf0 = Get mean (points)... start1 end
			early_end = end + final_offset
			finalf0 = Get value at time... early_end
			To Pitch... 0.02 30 600
			maxf0 = Get maximum... start1 end Hertz Parabolic
			minf0 = Get minimum... start1 end Hertz Parabolic
			excursionsize = hertzToSemitones(maxf0) - hertzToSemitones(minf0)
			Remove
			select Intensity 'name$'
			intensity = Get mean... start1 end energy
			select PitchTier velocity
			final_velocity = Get value at time... early_end
			
			select PitchTier velocity
			index_first = Get high index from time... start1
			index_last = Get low index from time... end
			maxvelocity = 0
			for x from index_first to index_last
				v = Get value at index... x
				if abs(v) > abs(maxvelocity)
					maxvelocity = v
				endif
			endfor
			select TableOfReal means
			Set value... interval 1 maxf0
			Set value... interval 2 minf0
			Set value... interval 3 excursionsize
			Set value... interval 4 meanf0
			Set value... interval 5 finalf0
			Set value... interval 6 intensity
			Set value... interval 7 duration
			Set value... interval 8 maxvelocity
			Set value... interval 9 final_velocity
			Insert row (index)... interval + 1
		endif
	endfor
	select TableOfReal means
	nrows = Get number of rows
	if nrows > 1
		Remove row (index)... nrows
	endif
endproc

procedure All_means file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.means
	nrows = Get number of rows
	if nrepetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_maxf0'n' = 0
			mean_minf0'n' = 0
			mean_excursionsize'n' = 0
			mean_meanf0'n' = 0
			mean_duration'n' = 0
			mean_maxvelocity'n' = 0
			mean_finalvelocity'n' = 0
			mean_finalf0'n' = 0
			mean_meanintensity'n' = 0
		endfor
	endif
	
	titleline$ = "Filename"
	maxf0_line$ = "_"+name$
	minf0_line$ = "_"+name$
	excursionsize_line$ = "_"+name$
	meanf0_line$ = "_"+name$
	finalf0_line$ = "_"+name$
	intensity_line$ = "_"+name$
	duration_line$ = "_"+name$
	maxvelocity_line$ = "_"+name$
	finalvelocity_line$ = "_"+name$

	if nrepetitions > 0 
		shortname$ = left$(name$,length(name$)-1)
		mean_maxf0_line$ = "_"+shortname$
		mean_minf0_line$ = "_"+shortname$
		mean_excursionsize_line$ = "_"+shortname$
		mean_meanf0_line$ = "_"+shortname$
		mean_finalf0_line$ = "_"+shortname$
		mean_meanintensity_line$ = "_"+shortname$
		mean_duration_line$ = "_"+shortname$
		mean_maxvelocity_line$ = "_"+shortname$
		mean_finalvelocity_line$ = "_"+shortname$
	endif

	for n from 1 to nrows
		if !hasmeanstitle
			rowname$ = Get row label... n
			titleline$ = "'titleline$'	'rowname$'"
		endif
		maxf0 = Get value... n 1
		maxf0_line$ = "'maxf0_line$'	'maxf0'"
		minf0 = Get value... n 2
		minf0_line$ = "'minf0_line$'	'minf0'"
		excursionsize = Get value... n 3
		excursionsize_line$ = "'excursionsize_line$'	'excursionsize'"
		meanf0 = Get value... n 4
		meanf0_line$ = "'meanf0_line$'	'meanf0'"
		finalf0 = Get value... n 5
		finalf0_line$ = "'finalf0_line$'	'finalf0'"
		intensity = Get value... n 6
		intensity_line$ = "'intensity_line$'	'intensity'"
		duration = Get value... n 7
		duration_line$ = "'duration_line$'	'duration'"
		maxvelocity = Get value... n 8
		maxvelocity_line$ = "'maxvelocity_line$'	'maxvelocity'"
		final_velocity = Get value... n 9
		finalvelocity_line$ = "'finalvelocity_line$'	'final_velocity'"

		if nrepetitions > 0 
			if repetition <= nrepetitions
				mean_maxf0'n' += ln(maxf0)
				mean_minf0'n' += ln(minf0)
				mean_excursionsize'n' += excursionsize
				mean_meanf0'n' += ln(meanf0)
				mean_duration'n' += duration
				mean_maxvelocity'n' += maxvelocity
				mean_finalvelocity'n' += final_velocity
				mean_finalf0'n' += ln(finalf0)
				mean_meanintensity'n' += intensity
			endif

			if repetition == nrepetitions
				mean_maxf0 = exp(mean_maxf0'n'/nrepetitions)
				mean_minf0 = exp(mean_minf0'n'/nrepetitions)
				mean_excursionsize = mean_excursionsize'n'/nrepetitions
				mean_meanf0 = exp(mean_meanf0'n'/nrepetitions)
				mean_duration = mean_duration'n'/nrepetitions
				mean_maxvelocity = mean_maxvelocity'n'/nrepetitions
				mean_finalvelocity = mean_finalvelocity'n'/nrepetitions
				mean_finalf0 = exp(mean_finalf0'n'/nrepetitions)
				mean_meanintensity = mean_meanintensity'n'/nrepetitions
				mean_maxf0_line$ = "'mean_maxf0_line$'	'mean_maxf0'"
				mean_minf0_line$ = "'mean_minf0_line$'	'mean_minf0'"
				mean_excursionsize_line$ = "'mean_excursionsize_line$'	'mean_excursionsize'"
				mean_meanf0_line$ = "'mean_meanf0_line$'	'mean_meanf0'"
				mean_duration_line$ = "'mean_duration_line$'	'mean_duration'"
				mean_maxvelocity_line$ = "'mean_maxvelocity_line$'	'mean_maxvelocity'"
				mean_finalvelocity_line$ = "'mean_finalvelocity_line$'	'mean_finalvelocity'"
				mean_finalf0_line$ = "'mean_finalf0_line$'	'mean_finalf0'"
				mean_meanintensity_line$ = "'mean_meanintensity_line$'	'mean_meanintensity'"
			endif
		endif

	endfor
	if !hasmeanstitle
		filedelete maxf0.txt
		filedelete minf0.txt
		filedelete excursionsize.txt
		filedelete meanf0.txt
		filedelete finalf0.txt
		filedelete meanintensity.txt
		filedelete duration.txt
		filedelete maxvelocity.txt
		filedelete finalvelocity.txt
		
		filedelete mean_maxf0.txt
		filedelete mean_minf0.txt
		filedelete mean_excursionsize.txt
		filedelete mean_meanf0.txt
		filedelete mean_finalf0.txt
		filedelete mean_meanintensity.txt
		filedelete mean_duration.txt
		filedelete mean_maxvelocity.txt
		filedelete mean_finalvelocity.txt

		titleline$ = "'titleline$''newline$'"
		fileappend maxf0.txt 'titleline$'
		fileappend minf0.txt 'titleline$'
		fileappend excursionsize.txt 'titleline$'
		fileappend meanf0.txt 'titleline$'
		fileappend finalf0.txt 'titleline$'
		fileappend meanintensity.txt 'titleline$'
		fileappend duration.txt 'titleline$'
		fileappend maxvelocity.txt 'titleline$'
		fileappend finalvelocity.txt 'titleline$'
		
		if nrepetitions > 0
			fileappend mean_maxf0.txt 'titleline$'
			fileappend mean_minf0.txt 'titleline$'
			fileappend mean_excursionsize.txt 'titleline$'
			fileappend mean_meanf0.txt 'titleline$'
			fileappend mean_finalf0.txt 'titleline$'
			fileappend mean_meanintensity.txt 'titleline$'
			fileappend mean_duration.txt 'titleline$'
			fileappend mean_maxvelocity.txt 'titleline$'
			fileappend mean_finalvelocity.txt 'titleline$'
		endif
		hasmeanstitle = 1
	endif
	fileappend "maxf0.txt" 'maxf0_line$''newline$'
	fileappend "minf0.txt" 'minf0_line$''newline$'
	fileappend "excursionsize.txt" 'excursionsize_line$''newline$'
	fileappend "meanf0.txt" 'meanf0_line$''newline$'
	fileappend "finalf0.txt" 'finalf0_line$''newline$'
	fileappend "meanintensity.txt" 'intensity_line$''newline$'
	fileappend "duration.txt" 'duration_line$''newline$'
	fileappend "maxvelocity.txt" 'maxvelocity_line$''newline$'
	fileappend "finalvelocity.txt" 'finalvelocity_line$''newline$'
	
	if nrepetitions > 0 and repetition == nrepetitions
		fileappend "mean_maxf0.txt" 'mean_maxf0_line$''newline$'
		fileappend "mean_minf0.txt" 'mean_minf0_line$''newline$'
		fileappend "mean_excursionsize.txt" 'mean_excursionsize_line$''newline$'
		fileappend "mean_meanf0.txt" 'mean_meanf0_line$''newline$'
		fileappend "mean_finalf0.txt" 'mean_finalf0_line$''newline$'
		fileappend "mean_meanintensity.txt" 'mean_meanintensity_line$''newline$'
		fileappend "mean_duration.txt" 'mean_duration_line$''newline$'
		fileappend "mean_maxvelocity.txt" 'mean_maxvelocity_line$''newline$'
		fileappend "mean_finalvelocity.txt" 'mean_finalvelocity_line$''newline$'

		for n from 1 to nrows
			mean_maxf0'n' = 0
			mean_minf0'n' = 0
			mean_excursionsize'n' = 0
			mean_meanf0'n' = 0
			mean_duration'n' = 0
			mean_maxvelocity'n' = 0
			mean_finalvelocity'n' = 0
			mean_finalf0'n' = 0
			mean_meanintensity'n' = 0
		endfor
	endif
	Remove
endproc

procedure All_normf0 file_name$
	if fileReadable ("'directory$''name$'.normtimef0")
		Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtimef0
	elsif fileReadable ("'directory$''name$'.timenormf0")
		Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.timenormf0
	endif
	nrows = Get number of rows
	if nrepetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normf0'n' = 0
			mean_actutime'n' = 0
			mean_normtimeIntensity'n' = 0
		endfor
	endif
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	if nrepetitions > 0
		mean_normf0_line$ = "_"+shortname$
		mean_actutime_line$ = "_"+shortname$
		mean_normtimeIntensity_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormf0
			normtime$ = Get value... n 1
			titleline$ = "'titleline$'	'normtime$'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"

		if nrepetitions > 0 
			nrows_meanf0 = Get number of rows
			if repetition <= nrepetitions
				mean_normf0'n' += ln(value)
			endif
			if repetition == nrepetitions
				mean_normf0 = exp(mean_normf0'n'/nrepetitions)
				mean_normf0_line$ = "'mean_normf0_line$'	'mean_normf0'"
			endif
		endif
	endfor
	if !hasnormf0
		filedelete normf0.txt
		fileappend normf0.txt 'titleline$''newline$'
		if nrepetitions > 0
			filedelete mean_normf0.txt
			fileappend mean_normf0.txt 'titleline$''newline$'
		endif
		hasnormf0 = 1
	endif
	fileappend "normf0.txt" 'resultline$''newline$'

	if nrepetitions > 0 
		if repetition = nrepetitions
			fileappend "mean_normf0.txt" 'mean_normf0_line$''newline$'
			for n from 1 to nrows
				mean_normf0'n' = 0
			endfor
		endif
	endif
	Remove

	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.actutimenormf0
	nrows = Get number of rows
	titleline$ = "Norm actual time"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormactutime
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 1
		resultline$ = "'resultline$'	'value'"

		if nrepetitions > 0 
			if repetition < nrepetitions
				mean_actutime'n' += value
			else
				mean_actutime'n' += value
				mean_actutime = mean_actutime'n'/nrepetitions
				mean_actutime_line$ = "'mean_actutime_line$'	'mean_actutime'"
			endif
		endif
	endfor
	if !hasnormactutime
		filedelete normactutime.txt
		fileappend normactutime.txt 'titleline$''newline$'
		if nrepetitions > 0
			filedelete mean_normactutime.txt
			fileappend mean_normactutime.txt 'titleline$''newline$'
		endif
		hasnormactutime = 1
	endif
	fileappend "normactutime.txt" 'resultline$''newline$'

	if nrepetitions > 0 
		if repetition = nrepetitions
			fileappend "mean_normactutime.txt" 'mean_actutime_line$''newline$'
			for n from 1 to nrows
				mean_actutime'n' = 0
			endfor
		endif
	endif
	Remove
	
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtimeIntensity
	nrows = Get number of rows
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormIntensity
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"

		if nrepetitions > 0 
			if repetition < nrepetitions
				mean_normtimeIntensity'n' += value
			else
				mean_normtimeIntensity'n' += value
				mean_normtimeIntensity = mean_normtimeIntensity'n'/nrepetitions
				mean_normtimeIntensity_line$ = "'mean_normtimeIntensity_line$'	'mean_normtimeIntensity'"
			endif
		endif
	endfor
	if !hasnormIntensity
		filedelete normtimeIntensity.txt
		fileappend normtimeIntensity.txt 'titleline$''newline$'
		if nrepetitions > 0
			filedelete mean_normtimeIntensity.txt
			fileappend mean_normtimeIntensity.txt 'titleline$''newline$'
		endif
		hasnormIntensity = 1
	endif
	fileappend "normtimeIntensity.txt" 'resultline$''newline$'

	if nrepetitions > 0 
		if repetition = nrepetitions
			fileappend "mean_normtimeIntensity.txt" 'mean_normtimeIntensity_line$''newline$'
			for n from 1 to nrows
				mean_normtimeIntensity'n' = 0
			endfor
		endif
	endif
	Remove
endproc

procedure All_normtime_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.normtime_f0velocity
	nrows = Get number of rows
	normtime = 0
	if nrepetitions > 0 and repetition == 1
		for n from 1 to nrows
			mean_normV0'n' = 0
		endfor
	endif
	title_line$ = "Normtime"
	v0_line$ = "_"+name$
	if nrepetitions > 0
		mean_normv0_line$ = "_"+shortname$
	endif
	for n from 1 to nrows
		if !hasnormtime_f0velocity
			normtime = normtime + 1
			title_line$ = "'title_line$'	'normtime'"
		endif
		v0 = Get value... n 2
		v0_line$ = "'v0_line$'	'v0'"

		if nrepetitions > 0 
			nrows_meanV0 = Get number of rows
			if repetition <= nrepetitions
				mean_normV0'n' += v0
			endif
			if repetition == nrepetitions
				mean_normV0 = mean_normV0'n'/nrepetitions
				mean_normv0_line$ = "'mean_normv0_line$'	'mean_normV0'"
			endif
		endif
	endfor
	if !hasnormtime_f0velocity
		filedelete normtime_f0velocity.txt
		fileappend normtime_f0velocity.txt 'title_line$''newline$'
		if nrepetitions > 0
			filedelete mean_normtime_f0velocity.txt
			fileappend mean_normtime_f0velocity.txt 'title_line$''newline$'
		endif
		hasnormtime_f0velocity = 1
	endif
	fileappend "normtime_f0velocity.txt" 'v0_line$''newline$'

	if nrepetitions > 0 
		if repetition == nrepetitions
			fileappend "mean_normtime_f0velocity.txt" 'mean_normv0_line$''newline$'
		endif
	endif
	Remove
endproc

#######################################################################################
procedure Cross_speaker_means file_name$ mode_of_averaging$
	has_meanfile = 0
	title_line$ = "Normtime"
	Read Strings from raw text file... 'Speaker_folder_location$''Speaker_folder_file$'
	Rename... speaker_folders
	nspeakers = Get number of strings
	speaker1$ = Get string... 1											; Get n_rows from 1st speaker
	Read Strings from raw text file... 'Speaker_folder_location$''speaker1$'/'file_name$'.txt
	nrows = Get number of strings
	Remove

	for row from 1 to nrows
		newspeaker = 1
		for s from 1 to nspeakers
			select Strings speaker_folders
			speaker$ = Get string... s										; Set speaker folder name
			Read Strings from raw text file... 'Speaker_folder_location$''speaker$'/'file_name$'.txt
			Extract part... row row											; Extract 1 row
			line1$ = Get string... 1										; Get current line
			line_part$ = line1$
			wrd$ = extractWord$(line1$, "")									; Get word 1
			Remove
			if s == 1 and row > 1
				speaker_mean_line$ = wrd$									; Put sound name into column 1
			endif
			n = 1
			while wrd$ != ""
				line_part$ = extractLine$(line_part$, wrd$)					; Remove current word + tab
				if row = 1 and n > 1 and s = 1
					title_line$ = "'title_line$'	'wrd$'"
				endif
				if n > 1 and wrd$ != "" and row > 1 and s <= nspeakers
					if not variableExists("speaker_mean'n'") or newspeaker == 1
						speaker_mean'n' = 0
					endif
					if mode_of_averaging$ = "logarithmic"
						speaker_mean'n' += ln('wrd$')
					else
						if wrd$ = "--undefined--"
							wrd$ = "0"
						endif
						speaker_mean'n' += 'wrd$'
					endif
				endif
				wrd$ = extractWord$(line_part$, "	")						; Get next word
				if s == nspeakers and n > 1 and row > 1 and variableExists("speaker_mean'n'")
					if mode_of_averaging$ = "logarithmic"
						speaker_mean = exp(speaker_mean'n' / nspeakers)
					else
						speaker_mean = speaker_mean'n' / nspeakers
					endif
					speaker_mean_line$ = "'speaker_mean_line$'	'speaker_mean'"
				endif
				n += 1
			endwhile
			newspeaker = 0
			select Strings 'file_name$'
			Remove
		endfor
		if !has_meanfile
			filedelete 'file_name$'_cross_speaker.txt
			fileappend "'file_name$'_cross_speaker.txt" 'title_line$''newline$'
			has_meanfile = 1
		endif
		if row > 1
			fileappend "'file_name$'_cross_speaker.txt" 'speaker_mean_line$''newline$'
		endif
	endfor
	printline File saved: 'file_name$'_cross_speaker.txt
	select Strings speaker_folders
	Remove
endproc
#######################################################################################

procedure All_samplef0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.samplef0
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hassamplef0
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hassamplef0
		filedelete samplef0.txt
		fileappend samplef0.txt 'titleline$''newline$'
		hassamplef0 = 1
	endif
	fileappend "samplef0.txt" 'resultline$''newline$'
	Remove
endproc

procedure All_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.f0velocity
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasf0velocity
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasf0velocity
		filedelete f0velocity.txt
		fileappend f0velocity.txt 'titleline$''newline$'
		hasf0velocity = 1
	endif
	fileappend "f0velocity.txt" 'resultline$''newline$'
	Remove
endproc

procedure Smooth curve_in$ curve_out$ width
	Create PitchTier... 'curve_out$' sampleStart sampleEnd
	
	for j from 1 to width							; make a triangular window of size = width 
		if j < width / 2 + 0.5
			weight'j' = j
		else 
			weight'j' = width - j + 1
		endif
	endfor

	select PitchTier 'curve_in$'
	smooth_end = Get number of points
	smooth_end += 1

	for i from 1 to width / 2						; smooth initial points: 0 to width/2 - 1 
	    n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
	    for j from 1 to width/2 + i					; window size = width/2 to width - 1
	    	j = 'j:0'
	    	rawsample = Get value at index... j
	    	index = width / 2 + j - i
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
	    endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
	endfor
	
	for i from width/2 to smooth_end - width/2				; smooth from width/2 to end-width/2
		n = 0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
		for j from 1 to width
	    	rawsample = Get value at index... i-width/2+j
			smoothsample += weight'j' * rawsample
			n += weight'j'
		endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
	endfor
	
	i = width/2
	while i > 0										; smooth final points: end - width/2 to end
		n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		i = 'i:0'
		sample_time = Get time from index... smooth_end-i
		j = width/2 + i
		j = 'j:0'
		while j > 1									; window size = width - 1 to width/2 
	    	rawsample = Get value at index... smooth_end-j
	    	index = width/2+i-j + 1
	    	index = round(index)
			smoothsample += weight'index' * rawsample
			n += weight'index'
			j -= 1
		endwhile
		smoothsample /= n
		select PitchTier 'curve_out$'
		if not smoothsample = undefined
			Add point... sample_time smoothsample
		endif
		i -= 1
	endwhile
endproc
